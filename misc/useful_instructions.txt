# GENERAL
docker network create \
	--driver bridge \
	--subnet 177.77.0.0/24 \
	--gateway 177.77.0.1 \
	--ip-range 177.77.0.2/24 \
	locale


# SQL
docker pull postgres
docker volume create pgdata && docker run -d --name postgresql -e POSTGRES_PASSWORD=postgres --network locale --ip 177.77.0.77 -v pgdata:/var/lib/postgresql/data postgres

docker exec -it postgresql bash
PGPASSWORD=postgres psql -h localhost -p 5432 -d postgres -U postgres

CREATE TABLE log_table
(
    id_log_table     SERIAL PRIMARY KEY,
    log_uuid         VARCHAR(64),
    log_datetime     TIMESTAMP,
    ip_address       VARCHAR(32),
    http_method      VARCHAR(32),
    uri              VARCHAR(256),
    http_status_code INTEGER
);

exit
exit


# WEB_API
docker build -t webapi -f ./webapi/Dockerfile ./
docker run --name=mywebapi --network locale --ip 177.77.0.78 -p 8000:8000 -d webapi


# CLIENT
docker build -t cliapi -f ./cliapi/Dockerfile ./
touch ~/cliapi_client.log && docker run -e THREADS=4 -e DELAY=1000 --name=mycliapi --network locale -v ~/cliapi_client.log:/app/client.log cliapi


# BACKGROUND_PROCEDURE
docker build -t bgproc -f ./bgproc/Dockerfile ./
touch ~/bgproc_data.txt && docker run --name=mybgproc --network locale -d -v ~/bgproc_data.txt:/app/data.txt bgproc


# USEFUL_COMMANDS
# docker rmi webapi:latest && docker build -t webapi -f ./webapi/Dockerfile ./
# docker stop mywebapi && docker rm mywebapi && \
# docker run --name mywebapi --network locale --ip 177.77.0.78 -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock webapi
# docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mywebapi
# curl -X POST -H "Content-Type: application/json" -d '{"log": "192.168.1.1 GET /example 200"}' http://localhost:8000/api/data
